
/****** Object:  StoredProcedure [dbo].[sp_DBA_RSAG_StateChangeAlert]    Script Date: 1/16/2021 2:36:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
Author:	Sagi Amichai @madeira
Date:	Dec 2020
Desc: monitor state change of RSAG by sampling states and comparing samples. In case of a state chnage, enters an inner loop of 
documenting requests and sessions and repeating the checkof state change compared to original sample.

*/

CREATE procedure [dbo].[sp_DBA_RSAG_StateChangeAlert]
as

	DECLARE
		@Messge NVARCHAR(4000),
		@Subject NVARCHAR(500) = 'DATABASE RSAG STATE CHANGE EVENT'+ @@SERVERNAME,
		@i tinyint = 1,
		@bit smallint = 1
	
	
	
	while @i<=60
	begin

		DROP TABLE IF EXISTS #FirstSample
		
		------------------------------------------------------------------------------------------------------------------------
		-- FIRST SAMPLE COLLECTING CURRENT STATE OF SYNCHRONIZATION
		------------------------------------------------------------------------------------------------------------------------
		SELECT
			GETDATE() AS log_date_time,			ar.replica_server_name,
			ag.name AS ag_name, 				adc.database_name, 
			drs.is_local, 						drs.is_primary_replica, 
			drs.synchronization_state_desc,		drs.is_commit_participant, 
			drs.synchronization_health_desc,	drs.is_suspended,
			drs.recovery_lsn, 					drs.truncation_lsn
		into #FirstSample
		FROM sys.dm_hadr_database_replica_states AS drs
		INNER JOIN sys.availability_databases_cluster AS adc ON drs.group_id = adc.group_id AND drs.group_database_id = adc.group_database_id
		INNER JOIN sys.availability_groups AS ag ON ag.group_id = drs.group_id
		INNER JOIN sys.availability_replicas AS ar ON drs.group_id = ar.group_id AND drs.replica_id = ar.replica_id
		
		

		------------------------------------------------------------------------------------------------------------------------
		-- WAIT ONE SECOND AND INITIATE A SECOND SAMPLE, TO CATCH SYNCHRONIZATION STATE CHANGES 
		------------------------------------------------------------------------------------------------------------------------
		waitfor delay '00:00:01'	

		-- IF EXISTS - CHANGE IN SYNCHRONIZATION STATE CHANGE
		if exists
		(	------------------------------------------------------------------------------------------------------------------------
			-- SECOND SAMPLE (SAME QUERY OF FIRST SAMPLE)
			------------------------------------------------------------------------------------------------------------------------
			SELECT				
				ar.replica_server_name,			ag.name AS ag_name, 
				adc.database_name, 				drs.is_local, 
				drs.is_primary_replica, 		drs.synchronization_state_desc, 
				drs.is_commit_participant, 		drs.synchronization_health_desc, 
				drs.is_suspended		
			FROM sys.dm_hadr_database_replica_states AS drs
			INNER JOIN sys.availability_databases_cluster AS adc ON drs.group_id = adc.group_id AND drs.group_database_id = adc.group_database_id
			INNER JOIN sys.availability_groups AS ag ON ag.group_id = drs.group_id
			INNER JOIN sys.availability_replicas AS ar ON drs.group_id = ar.group_id AND drs.replica_id = ar.replica_id
			WHERE drs.synchronization_state_desc!='SYNCHRONIZING' 
			-- COMPARED TO 
			EXCEPT	
			-- FIRST SAMPLE
			SELECT		
				replica_server_name, ag_name, database_name, is_local, is_primary_replica, 
				synchronization_state_desc, is_commit_participant, synchronization_health_desc, is_suspended
			FROM #FirstSample

		)
		begin
			INSERT INTO [DBA].[dbo].[DBA_RSAG_Monitoring_State]
			SELECT
				GETDATE() AS [TimeStamp],		'StateChangeAlert - Second sample',
				ar.replica_server_name,			ag.name AS ag_name, 
				adc.database_name, 				drs.is_local, 
				drs.is_primary_replica, 		drs.synchronization_state_desc, 
				drs.is_commit_participant, 		drs.synchronization_health_desc, 
				drs.is_suspended,				drs.recovery_lsn, 
				drs.truncation_lsn
			FROM sys.dm_hadr_database_replica_states AS drs
			INNER JOIN sys.availability_databases_cluster AS adc ON drs.group_id = adc.group_id AND drs.group_database_id = adc.group_database_id
			INNER JOIN sys.availability_groups AS ag ON ag.group_id = drs.group_id
			INNER JOIN sys.availability_replicas AS ar ON drs.group_id = ar.group_id AND drs.replica_id = ar.replica_id
			ORDER BY 
				ag.name, 
				ar.replica_server_name, 
				adc.database_name;			
			------------------------------------------------------------------------------------------------------------------------
			-- WAIT AGAIN, AND SAMPLE AGAIN - THIS IS TO ACT DIFFERENTLY FOR SHORT CHANGES THAT MIGHT
			-- RESULT FROM SHORT NETWORK ISSUES
			------------------------------------------------------------------------------------------------------------------------		
			
			waitfor delay '00:00:09'
			
			------------------------------------------------------------------------------------------------------------------------
			-- IF STATE IS STILL DIFFERENT THAN FIRST SAMPEL - HIGH ALERT 
			------------------------------------------------------------------------------------------------------------------------
			if exists
			(					
				SELECT				
					ar.replica_server_name,			ag.name AS ag_name, 
					adc.database_name, 				drs.is_local, 
					drs.is_primary_replica, 		drs.synchronization_state_desc, 
					drs.is_commit_participant, 		drs.synchronization_health_desc, 
					drs.is_suspended			
				FROM sys.dm_hadr_database_replica_states AS drs
				INNER JOIN sys.availability_databases_cluster AS adc ON drs.group_id = adc.group_id AND drs.group_database_id = adc.group_database_id
				INNER JOIN sys.availability_groups AS ag ON ag.group_id = drs.group_id
				INNER JOIN sys.availability_replicas AS ar ON drs.group_id = ar.group_id AND drs.replica_id = ar.replica_id
				WHERE drs.synchronization_state_desc!='SYNCHRONIZED' 
				EXCEPT
				SELECT		
					replica_server_name, ag_name, database_name, is_local, is_primary_replica, 
					synchronization_state_desc, is_commit_participant, synchronization_health_desc, is_suspended
				FROM #FirstSample
			)
			BEGIN
				
				INSERT INTO [DBA].[dbo].[DBA_RSAG_Monitoring_State]
				SELECT
					GETDATE() AS [TimeStamp],	'StateChangeAlert - Third sample',
					ar.replica_server_name,		ag.name AS ag_name, 
					adc.database_name,			drs.is_local, 
					drs.is_primary_replica, 	drs.synchronization_state_desc, 
					drs.is_commit_participant, 	drs.synchronization_health_desc, 
					drs.is_suspended,			drs.recovery_lsn, 
					drs.truncation_lsn
				FROM sys.dm_hadr_database_replica_states AS drs
				INNER JOIN sys.availability_databases_cluster AS adc ON drs.group_id = adc.group_id AND drs.group_database_id = adc.group_database_id
				INNER JOIN sys.availability_groups AS ag ON ag.group_id = drs.group_id
				INNER JOIN sys.availability_replicas AS ar ON drs.group_id = ar.group_id AND drs.replica_id = ar.replica_id
				ORDER BY 
					ag.name, 
					ar.replica_server_name, 
					adc.database_name;
				
				SELECT @Messge = 
				N'Database Availability Groups Status has changed on one or more of the databases, for over more than 10 seconds, at server'	+@@servername+ CHAR(10)
				
				EXEC msdb.dbo.sp_send_dbmail
				@profile_name = '<MAIL PROFILE>',
				@recipients = '<MAIL ACCOUNTS>',
				@body = @Messge,
				@subject = @Subject

				SET @bit =1

				WHILE (@bit = 1)
				--BEGIN INNER WHILE
				BEGIN 

					------------------------------------------------------------------------------------------------------------------------
					-- INSERT INTO [dbo].[DBA_RSAG_RequestsMonitor]  CURRENT REQUESTS AND SESSIONS FOR FUTURE INVESTIGATION
					------------------------------------------------------------------------------------------------------------------------					
					exec sp_DBA_RSAG_CollectMonitoring_Requests 'StateChangeAlert'
					
					waitfor delay '00:00:05'
					------------------------------------------------------------------------------------------------------------------------
					-- BREAK THE LOOP OF DIFFERENT STATE/S FROM FIRST SAMPLE
					------------------------------------------------------------------------------------------------------------------------
					if not exists
					(					
						SELECT				
							ar.replica_server_name,			ag.name AS ag_name, 
							adc.database_name, 				drs.is_local, 
							drs.is_primary_replica, 		drs.synchronization_state_desc, 
							drs.is_commit_participant, 		drs.synchronization_health_desc, 
							drs.is_suspended					
						FROM sys.dm_hadr_database_replica_states AS drs
						INNER JOIN sys.availability_databases_cluster AS adc ON drs.group_id = adc.group_id AND drs.group_database_id = adc.group_database_id
						INNER JOIN sys.availability_groups AS ag ON ag.group_id = drs.group_id
						INNER JOIN sys.availability_replicas AS ar ON drs.group_id = ar.group_id AND drs.replica_id = ar.replica_id
						WHERE drs.synchronization_state_desc!='SYNCHRONIZED' 
						EXCEPT
						SELECT		
							replica_server_name, ag_name, database_name, is_local, is_primary_replica, 
							synchronization_state_desc, is_commit_participant, synchronization_health_desc, is_suspended
						FROM #FirstSample
					) 	
					BEGIN
						SET @bit = 0

						SELECT @Messge = 
						N'Database Availability Groups Status IS HEALTHY NOW. '+ CHAR(10)+ 
						N'It has changed on one or more of the databases, for over more than 10 seconds, at server'	+@@servername+ CHAR(10)+ 
						N'But currently is fine. No action is needed.'						+ CHAR(10)+ CHAR(13)

						EXEC msdb.dbo.sp_send_dbmail
						@profile_name = '<MAIL PROFILE>',
						@recipients = '<MAIL ACCOUNTS>',	
						@body = @Messge,
						@subject = @Subject
					END
				-- END INNER WHILE		
				END

			END --END CASE OF THIRD STATE DIFFERENT FROM FIRST SAMPLE
			------------------------------------------------------------------------------------------------------------------------
			-- IF STATE GOT BACK TO WHAT IT WAS AT FIRST SAMPLE 
			------------------------------------------------------------------------------------------------------------------------
			ELSE 
			BEGIN
				SELECT @Messge = 
				N'Database Availability Groups Status has changed on one or more of the databases, for 1 second, at server'	+@@servername	+ CHAR(10)+ 
				N'The next check (9 seconds later) returned the original status'		+ CHAR(10)+ 
				N'Investigate networking and table [DBA].[dbo].[DBA_RSAG_Monitoring_State]'			+ CHAR(10)+ CHAR(13)

				EXEC msdb.dbo.sp_send_dbmail
				@profile_name = '<MAIL PROFILE>',
				@recipients = '<MAIL ACCOUNTS>',	
				@body = @Messge,
				@subject = @Subject		
				
			END

		END -- END CASE SECOND SAMPLE DIFFERENT FROM FIRST SAMPLE

				
		DROP TABLE IF EXISTS #FirstSample
		

		SET @i+=1
	END --while @i

GO
/****** Object:  StoredProcedure [dbo].[sp_DBA_RSAG_SyncLagAlert]    Script Date: 1/16/2021 2:36:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO